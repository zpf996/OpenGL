//基本复合变换
//online.zpf666.www

#include<stdio.h>

#include<stdlib.h>
#include<math.h>
#include<gl/glut.h> 

#define pi 3.1415926
typedef float JZ[3][3];
class wcPt2D
{
public:
	GLfloat x, y;
};

JZ TTF;//复合矩阵
	   //基本复合变换
	   //平移->旋转->反射变换
	   //平移 < -旋转 < -

//创建3X3矩阵
void creatJZ(JZ J1) {
	int i, j;
	for (i = 0; i < 3; i++)
		for (j = 0; j < 3; j++)
			J1[i][j] = (i == j);
}
//将矩阵1与矩阵2相乘并存于矩阵2
void PreMultiply(JZ z1, JZ z2)
{
	int i, j;
	JZ Temp;
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			Temp[i][j] = z1[i][0] * z2[0][j] + z1[i][1] * z2[1][j] + z1[i][2] * z2[2][j];
		}
	}
	for (i = 0; i < 3; i++)
	{
		for (j = 0; j < 3; j++)
		{
			z2[i][j] = Temp[i][j];
		}
	}

}
//平移变换，平移量x,y
void PY(float x, float y) {
	JZ T;
	creatJZ(T);
	//初始化为单位矩阵
	T[0][2] = x;
	T[1][2] = y;
	PreMultiply(T, TTF);  //与符合矩阵相乘
}
//旋转变换，中心点为x,y,角度为@
void XZ(GLfloat theta) {
	JZ T;
	creatJZ(T);
	//初始化为单位矩阵
	T[0][0] = cos(theta);
	T[0][1] = -sin(theta);
	
	T[1][0] = sin(theta);
	T[1][1] = cos(theta);

	PreMultiply(T, TTF);
}
void DC() {
	JZ T;
	creatJZ(T);
	T[1][1] = -1;
	PreMultiply(T, TTF);
}
void transformVerts2D(GLint nVerts, wcPt2D * verts)
{
	GLint k;
	GLfloat temp;
	for (k = 0; k < nVerts; k++)
	{
		temp = TTF[0][0] * verts[k].x + TTF[0][1] * verts[k].y + TTF[0][2];
		verts[k].y = TTF[1][0] * verts[k].x + TTF[1][1] * verts[k].y + TTF[1][2];
		verts[k].x = temp;
	}
}
void triangle(wcPt2D * verts)
{
	GLint k;
	glBegin(GL_TRIANGLES);
	for (k = 0; k < 3; k++)
		glVertex2f(verts[k].x, verts[k].y);
	glEnd();
	glBegin(GL_LINE_LOOP);
	for (k = 3; k < 5; k++)
		glVertex2f(verts[k].x, verts[k].y);
	glEnd();
}

void Init()

{

	glClearColor(1.0, 1.0, 1.0, 1.0);

	glShadeModel(GL_FLAT);

	glMatrixMode(GL_PROJECTION);

	glLoadIdentity();

	gluOrtho2D(0.0, 400.0, 0.0, 400.0);

}

void mydisplay()

{
	GLint nVerts = 3;
	wcPt2D verts[3] = { { 50.0,250.0 },{ 100.0,250.0 },{ 125.0,300.0 }};

	wcPt2D centroidPt;

	GLint k, xSum = 0, ySum = 0;
	for (k = 0; k < nVerts; k++)
	{
		xSum += verts[k].x;
		ySum += verts[k].y;
	}
	centroidPt.x = GLfloat(xSum) / GLfloat(nVerts);
	centroidPt.y = GLfloat(ySum) / GLfloat(nVerts);

	wcPt2D pivPt, fixedPt;
	pivPt = centroidPt;
	fixedPt = centroidPt;

	GLfloat tx = 0.0, ty = 120.0;
	GLdouble theta = pi / 4.0;

	glClear(GL_COLOR_BUFFER_BIT);//设置窗口背景设置为当前清空颜色

	glColor3f(1.0f, 0.0f, 0.0f);

	glPointSize(2);

	
	//绘制三角形
	triangle(verts);
	//变为单位矩阵
	creatJZ(TTF); 
	glBegin(GL_LINES);
	//绘制直线
	glVertex2i(0, 0);
	glVertex2i(600, 600);
	glEnd();
	PY(-verts[3].x, -verts[3].y);
	XZ(-theta);
	DC();
	XZ(theta);
	PY(verts[3].x, verts[3].y);
	transformVerts2D(nVerts, verts);

	glColor3f(1.0, 0.0, 0.0);
	triangle(verts);
	

	glFlush();                          //保证前面的OpenGL命令立即执行，而不是在缓冲池中

}

int main(int argc, char *argv[]) {

	glutInit(&argc, argv);     //对GLUT初始化

	glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);  //设置显示方式

	glutInitWindowPosition(10, 10);  //设置窗口在屏幕中的位置

	glutInitWindowSize(500, 500);      //设置窗口的大小

	glutCreateWindow("transformation");    //设置窗口的标题

	Init();

	glutDisplayFunc(&mydisplay);       //设置一个函数，需要画图时被调用

	glutMainLoop();                    //消息循环，显示窗口

	return 0;

}
